@import "breakpoints";

$defaultContainerMap: (
    "left": (
        "columnCount": 1,
        "breakout": false
    ),
    "right": (
        "columnCount": 1,
        "breakout": false
    )
);

$defaultContainerGutterBreakpointMap: (
    "for-tablet-landscape-up": 50px,
    "for-desktop-up": 140px
);

@mixin columnContainer(
    $columnCount: 2,
    $gutterDefault: 20px,
    $gutterBreakpoints: $defaultContainerGutterBreakpointMap,
    $maxWidth: 1600px,
    $breakpoint: "for-tablet-landscape-up",
    $columnMap: $defaultContainerMap
) {
    & {
        margin-left: $gutterDefault;
        margin-right: $gutterDefault;
        @include mediaquery($breakpoint) {
            margin-left: 0;
            margin-right: 0;
            display: grid;
            position: relative;
        }
        @each $key, $g in $gutterBreakpoints {
            @include mediaquery($key) {
                $w: $maxWidth / $columnCount;
                grid-template-columns:
                    minmax($g, 1fr)
                    repeat($columnCount, minmax(0, $w))
                    minmax($g, 1fr);
            }
        }
    }

    $left: map-get($columnMap, "left");
    $right: map-get($columnMap, "right");

    $spanLeft: 1;
    $startLeft: 1;

    @if map-get($left, "breakout") == true {
        $spanLeft: map-get($left, "columnCount") + 1;
    } @else {
        $startLeft: 2;
        $spanLeft: map-get($left, "columnCount");
    }

    $spanRight: 1;
    $startRight: $spanLeft + $startLeft;

    @if map-get($right, "breakout") == true {
        $spanRight: map-get($right, "columnCount") + 1;
    } @else {
        $spanRight: map-get($right, "columnCount");
    }

    &__left,
    &__right {
        display: block;
        position: relative;
    }

    &__left {
        @if map-get($left, "breakout") == true {
            margin-left: -$gutterDefault;
            margin-right: -$gutterDefault;
        }
        @include mediaquery($breakpoint) {
            margin-left: 0;
            margin-right: 0;
            grid-column: $startLeft / span $spanLeft;
            grid-row: 1;
        }
    }
    &__right {
        @if map-get($right, "breakout") == true {
            margin-left: -$gutterDefault;
            margin-right: -$gutterDefault;
        }
        @include mediaquery($breakpoint) {
            margin-left: 0;
            margin-right: 0;
            grid-column: $startRight / span $spanRight;
            grid-row: 1;
        }
    }
}

@mixin container(
    $gutterDefault: 20px,
    $gutterBreakpoints: $defaultContainerGutterBreakpointMap,
    $maxWidth: 1600px,
    $breakpoint: "for-tablet-landscape-up",
    $breakout: null
) {
    & {
        @if $breakout {
            padding-left: 0;
            padding-right: 0;
        } @else {
            padding-left: $gutterDefault;
            padding-right: $gutterDefault;
        }

        @include mediaquery($breakpoint) {
            padding-left: 0;
            padding-right: 0;
            display: grid;
            position: relative;
            & > * {
                display: block;
                grid-column: 2 / span 1;
                @if $breakout {
                    @if $breakout == "left" {
                        grid-column: 1 / span 2;
                    } @else if $breakout == "right" {
                        grid-column: 2 / span 2;
                    } @else if $breakout == "both" {
                        grid-column: 1 / span 3;
                    } @else {
                        @error "Breakout '#{$breakout}' doesn't exist";
                    }
                }
            }
        }

        @each $key, $g in $gutterBreakpoints {
            @include mediaquery($key) {
                grid-template-columns:
                    minmax($g, 1fr)
                    minmax(0, $maxWidth)
                    minmax($g, 1fr);
            }
        }
    }
}
